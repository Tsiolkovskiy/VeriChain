import React, { useState, useEffect, useCallback, useMemo } from 'react';

// --- –¢–ò–ü–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• ---
interface EvidenceFile {
  id: string;
  name: string;
  url: string;
  uploadDate: string;
  status?: 'pending' | 'verified' | 'deleted';
}

interface TeamMemberProps {
  name: string;
  role: string;
  imageUrl: string;
}

// --- –ú–û–ö-–ö–õ–ò–ï–ù–¢ S3 –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô –ë–õ–û–ö–ß–ï–ô–ù ---
const useS3MockClient = () => {
  const STORAGE_KEY = 's3-mock-files';
  
  const listFiles = useCallback(async (): Promise<EvidenceFile[]> => {
    const storedFiles = localStorage.getItem(STORAGE_KEY);
    const initialFiles: EvidenceFile[] = [
      { 
        id: 'initial-1', 
        name: 'case-001-photo.jpg', 
        url: 's3://verichain-bucket/case-001-photo.jpg', 
        uploadDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        status: 'verified'
      },
      { 
        id: 'initial-2', 
        name: 'witness-video.mp4', 
        url: 's3://verichain-bucket/witness-video.mp4', 
        uploadDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
        status: 'verified'
      },
    ];
    
    return storedFiles ? JSON.parse(storedFiles) : initialFiles;
  }, []);

  const uploadFile = useCallback(async (file: File): Promise<EvidenceFile> => {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const newEvidence: EvidenceFile = {
      id: `file-${Date.now()}`,
      name: file.name,
      url: `s3://verichain-bucket/${file.name}`,
      uploadDate: new Date().toISOString(),
      status: 'pending'
    };
    
    const files = await listFiles();
    const updatedFiles = [...files, newEvidence];
    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedFiles));
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω
    setTimeout(() => {
      const blockchainFiles = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
      const updated = blockchainFiles.map((f: EvidenceFile) => 
        f.id === newEvidence.id ? {...f, status: 'verified'} : f
      );
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updated));
    }, 2000);
    
    return newEvidence;
  }, [listFiles]);

  const deleteFile = useCallback(async (fileId: string): Promise<string> => {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const files = await listFiles();
    const updatedFiles = files.map(file => 
      file.id === fileId ? {...file, status: 'deleted'} : file
    );
    
    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedFiles));
    return fileId;
  }, [listFiles]);

  return { listFiles, uploadFile, deleteFile };
};

// --- –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–õ–ê–ô–î–û–í ---
const LogoIcon: React.FC = () => (
  <div className="logo-icon mx-auto mb-4">
    <div className="chain-link"></div>
    <div className="chain-link"></div>
    <div className="check-icon">‚úì</div>
  </div>
);

const TitleSlide: React.FC = () => (
  <section className="section-full bg-gradient-to-br from-gray-900 to-black">
    <LogoIcon />
    <h1 className="text-5xl md:text-7xl font-extrabold text-white mt-6">
      VeriChain Evidence Ledger
    </h1>
    <p className="text-2xl md:text-4xl font-semibold text-red-400 mt-8">
      "Evidence that can‚Äôt disappear"
    </p>
    <div className="mt-12 animate-bounce">
      <span className="text-gray-400">‚ñº</span>
    </div>
  </section>
);

const ProblemSlide: React.FC = () => (
  <section className="section-full bg-gray-900">
    <h2 className="text-4xl md:text-5xl font-bold mb-12 text-white">
      The Evidence Vulnerability Crisis
    </h2>
    
    <div className="grid md:grid-cols-2 gap-8 max-w-6xl mx-auto">
      <div className="bg-gray-800 p-6 rounded-xl border border-red-900">
        <h3 className="text-2xl text-red-400 font-bold mb-4">The Problem</h3>
        <ul className="text-gray-300 space-y-3">
          <li className="flex items-start">
            <span className="text-red-500 mr-2">‚óè</span>
            Digital evidence can be altered or deleted
          </li>
          <li className="flex items-start">
            <span className="text-red-500 mr-2">‚óè</span>
            Chain of custody gaps enable tampering
          </li>
          <li className="flex items-start">
            <span className="text-red-500 mr-2">‚óè</span>
            High-profile cases lost due to missing evidence
          </li>
        </ul>
      </div>
      
      <div className="bg-gray-800 p-6 rounded-xl">
        <div className="evidence-timeline">
          <div className="timeline-event">
            <div className="event-date">2025</div>
            <div className="event-content">Digital evidence created</div>
          </div>
          <div className="timeline-event lost">
            <div className="event-date">2026</div>
            <div className="event-content">Evidence tampered</div>
          </div>
          <div className="timeline-event">
            <div className="event-date">2027</div>
            <div className="event-content">Justice compromised</div>
          </div>
        </div>
      </div>
    </div>
  </section>
);

const EvidenceManagerSlide: React.FC = () => {
  const { listFiles, uploadFile, deleteFile } = useS3MockClient();
  const [files, setFiles] = useState<EvidenceFile[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isUploading, setIsUploading] = useState<boolean>(false);
  const [progress, setProgress] = useState<number>(0);

  useEffect(() => {
    const fetchFiles = async () => {
      setIsLoading(true);
      const fileList = await listFiles();
      setFiles(fileList);
      setIsLoading(false);
    };
    fetchFiles();
  }, [listFiles]);

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setIsUploading(true);
    setProgress(0);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    const interval = setInterval(() => {
      setProgress(prev => Math.min(prev + 10, 90));
    }, 100);
    
    try {
      const newFile = await uploadFile(file);
      setFiles(prev => [...prev, newFile]);
      setProgress(100);
      setTimeout(() => setProgress(0), 1000);
    } catch (error) {
      console.error("Upload failed:", error);
    } finally {
      clearInterval(interval);
      setIsUploading(false);
    }
  };

  const handleFileDelete = async (fileId: string) => {
    await deleteFile(fileId);
    setFiles(prev => 
      prev.map(file => 
        file.id === fileId ? {...file, status: 'deleted'} : file
      )
    );
  };

  const getStatusIcon = (status?: string) => {
    switch (status) {
      case 'verified': return <span className="text-green-500">‚úì</span>;
      case 'pending': return <span className="text-yellow-500 animate-pulse">‚ßó</span>;
      case 'deleted': return <span className="text-red-500">‚úï</span>;
      default: return <span className="text-gray-500">‚óå</span>;
    }
  };

  return (
    <section className="section-full bg-gray-800">
      <h2 className="text-4xl md:text-5xl font-bold mb-8 text-white">
        Evidence Management System
      </h2>
      
      <div className="w-full max-w-4xl bg-gray-900 p-6 rounded-xl shadow-2xl border border-gray-700">
        <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
          <h3 className="text-2xl font-semibold text-white">
            Blockchain-Verified Evidence
          </h3>
          
          <label className={`
            relative bg-red-600 text-white font-bold py-2 px-6 rounded-lg 
            cursor-pointer hover:bg-red-700 transition flex items-center
            ${isUploading ? 'opacity-50 cursor-not-allowed' : ''}
          `}>
            {isUploading ? 'Uploading...' : 'üîí Add Evidence'}
            <input 
              type="file" 
              className="hidden" 
              onChange={handleFileUpload} 
              disabled={isUploading} 
            />
          </label>
        </div>
        
        {isUploading && (
          <div className="mb-4">
            <div className="w-full bg-gray-700 rounded-full h-2.5">
              <div 
                className="bg-red-600 h-2.5 rounded-full transition-all duration-300" 
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <div className="text-right text-sm text-gray-400 mt-1">
              Securing to blockchain...
            </div>
          </div>
        )}
        
        <div className="h-96 overflow-y-auto pr-2">
          {isLoading ? (
            <div className="flex flex-col items-center justify-center py-10">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-red-500 mb-4"></div>
              <p className="text-gray-400">Loading evidence from blockchain...</p>
            </div>
          ) : files.length === 0 ? (
            <div className="text-center py-10">
              <p className="text-gray-400 mb-4">No evidence found</p>
              <p className="text-gray-600 max-w-md mx-auto">
                Upload your first piece of evidence to create an immutable record on the blockchain
              </p>
            </div>
          ) : (
            <div className="evidence-grid">
              {files.map(file => (
                <div 
                  key={file.id} 
                  className={`evidence-card ${
                    file.status === 'deleted' ? 'deleted' : ''
                  }`}
                >
                  <div className="file-icon">
                    {file.name.includes('.mp4') ? 'üìπ' : 'üì∑'}
                  </div>
                  <div className="file-info">
                    <div className="file-name">{file.name}</div>
                    <div className="file-date">
                      {new Date(file.uploadDate).toLocaleString()}
                    </div>
                  </div>
                  <div className="file-status">
                    {getStatusIcon(file.status)}
                    {file.status === 'pending' && (
                      <span className="text-xs text-yellow-500 ml-1">Verifying</span>
                    )}
                  </div>
                  <button 
                    onClick={() => handleFileDelete(file.id)}
                    className="delete-btn"
                    disabled={file.status === 'deleted'}
                  >
                    {file.status === 'deleted' ? 'Deleted' : 'Delete'}
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
      
      <div className="blockchain-badge mt-8">
        <span className="chain-icon">‚õìÔ∏è</span>
        <span>Powered by XION Blockchain</span>
      </div>
    </section>
  );
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–∞–π–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π...

const App: React.FC = () => {
  const styles = useMemo(() => `
    /* ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∏–ª–∏ ... */
    
    /* –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UI */
    .evidence-timeline {
      position: relative;
      padding-left: 20px;
    }
    
    .evidence-timeline::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      height: 100%;
      width: 2px;
      background: linear-gradient(to bottom, #ef4444, #7c2d12);
    }
    
    .timeline-event {
      position: relative;
      margin-bottom: 30px;
      padding-left: 20px;
    }
    
    .timeline-event::before {
      content: '';
      position: absolute;
      left: -6px;
      top: 8px;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background-color: #ef4444;
      border: 2px solid #7c2d12;
    }
    
    .timeline-event.lost::before {
      background-color: #7c2d12;
      animation: pulse 2s infinite;
    }
    
    .event-date {
      font-weight: bold;
      color: #f97316;
      margin-bottom: 5px;
    }
    
    .event-content {
      color: #d1d5db;
    }
    
    .evidence-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 16px;
    }
    
    .evidence-card {
      background-color: #1f2937;
      border: 1px solid #374151;
      border-radius: 12px;
      padding: 16px;
      display: flex;
      align-items: center;
      transition: all 0.3s ease;
    }
    
    .evidence-card:hover {
      border-color: #ef4444;
      transform: translateY(-3px);
      box-shadow: 0 4px 6px rgba(239, 68, 68, 0.1);
    }
    
    .evidence-card.deleted {
      opacity: 0.6;
      background-color: #1a202c;
      border-color: #7c2d12;
    }
    
    .file-icon {
      font-size: 24px;
      margin-right: 16px;
      flex-shrink: 0;
    }
    
    .file-info {
      flex-grow: 1;
      overflow: hidden;
    }
    
    .file-name {
      font-weight: 500;
      color: white;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .file-date {
      font-size: 12px;
      color: #9ca3af;
    }
    
    .file-status {
      margin: 0 12px;
      font-size: 20px;
      flex-shrink: 0;
    }
    
    .delete-btn {
      background: none;
      border: 1px solid #ef4444;
      color: #ef4444;
      padding: 6px 12px;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.2s;
      flex-shrink: 0;
    }
    
    .delete-btn:hover {
      background-color: #7c2d12;
    }
    
    .delete-btn:disabled {
      border-color: #4b5563;
      color: #4b5563;
      cursor: not-allowed;
    }
    
    .blockchain-badge {
      display: inline-flex;
      align-items: center;
      background-color: rgba(31, 41, 55, 0.8);
      border: 1px solid #4b5563;
      padding: 8px 16px;
      border-radius: 999px;
      color: #d1d5db;
      font-size: 14px;
    }
    
    .chain-icon {
      margin-right: 8px;
      font-size: 18px;
    }
    
    @keyframes pulse {
      0% { box-shadow: 0 0 0 0 rgba(124, 45, 18, 0.7); }
      70% { box-shadow: 0 0 0 10px rgba(124, 45, 18, 0); }
      100% { box-shadow: 0 0 0 0 rgba(124, 45, 18, 0); }
    }
    
    .logo-icon {
      position: relative;
      width: 120px;
      height: 120px;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    
    .chain-link {
      position: absolute;
      width: 100%;
      height: 100%;
      border: 4px solid #ef4444;
      border-radius: 50%;
    }
    
    .chain-link:nth-child(1) {
      transform: rotate(30deg);
    }
    
    .chain-link:nth-child(2) {
      transform: rotate(-30deg);
    }
    
    .check-icon {
      position: relative;
      z-index: 2;
      font-size: 48px;
      color: #22c55e;
      background-color: rgba(34, 197, 94, 0.1);
      width: 60px;
      height: 60px;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      animation: pulseGreen 2s infinite;
    }
    
    @keyframes pulseGreen {
      0% { box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.4); }
      70% { box-shadow: 0 0 0 10px rgba(34, 197, 94, 0); }
      100% { box-shadow: 0 0 0 0 rgba(34, 197, 94, 0); }
    }
  `, []);

  return (
    <>
      <style>{styles}</style>
      <main className="antialiased">
        <TitleSlide />
        <ProblemSlide />
        <EvidenceManagerSlide />
        {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–∞–π–¥—ã... */}
      </main>
    </>
  );
};

export default App;
